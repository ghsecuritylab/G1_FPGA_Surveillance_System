// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ==============================================================

`timescale 1ns/1ps
module hdmi_v_mix_0_0_v_mix_CTRL_s_axi
#(parameter
    C_S_AXI_ADDR_WIDTH = 18,
    C_S_AXI_DATA_WIDTH = 32
)(
    // axi4 lite slave signals
    input  wire                          ACLK,
    input  wire                          ARESET,
    input  wire                          ACLK_EN,
    input  wire [C_S_AXI_ADDR_WIDTH-1:0] AWADDR,
    input  wire                          AWVALID,
    output wire                          AWREADY,
    input  wire [C_S_AXI_DATA_WIDTH-1:0] WDATA,
    input  wire [C_S_AXI_DATA_WIDTH/8-1:0] WSTRB,
    input  wire                          WVALID,
    output wire                          WREADY,
    output wire [1:0]                    BRESP,
    output wire                          BVALID,
    input  wire                          BREADY,
    input  wire [C_S_AXI_ADDR_WIDTH-1:0] ARADDR,
    input  wire                          ARVALID,
    output wire                          ARREADY,
    output wire [C_S_AXI_DATA_WIDTH-1:0] RDATA,
    output wire [1:0]                    RRESP,
    output wire                          RVALID,
    input  wire                          RREADY,
    output wire                          interrupt,
    // user signals
    output wire [15:0]                   HwReg_width,
    output wire [15:0]                   HwReg_height,
    output wire [15:0]                   HwReg_video_format,
    output wire [15:0]                   HwReg_background_Y_R,
    output wire [15:0]                   HwReg_background_U_G,
    output wire [15:0]                   HwReg_background_V_B,
    output wire [15:0]                   HwReg_layerEnable,
    output wire [15:0]                   HwReg_layerAlpha_0,
    output wire [15:0]                   HwReg_layerStartX_0,
    output wire [15:0]                   HwReg_layerStartY_0,
    output wire [15:0]                   HwReg_layerWidth_0,
    output wire [15:0]                   HwReg_layerStride_0,
    output wire [15:0]                   HwReg_layerHeight_0,
    output wire [7:0]                    HwReg_layerScaleFactor_0,
    output wire [7:0]                    HwReg_layerVideoFormat_0,
    output wire [15:0]                   HwReg_layerAlpha_1,
    output wire [15:0]                   HwReg_layerStartX_1,
    output wire [15:0]                   HwReg_layerStartY_1,
    output wire [15:0]                   HwReg_layerWidth_1,
    output wire [15:0]                   HwReg_layerStride_1,
    output wire [15:0]                   HwReg_layerHeight_1,
    output wire [7:0]                    HwReg_layerScaleFactor_1,
    output wire [7:0]                    HwReg_layerVideoFormat_1,
    output wire [15:0]                   HwReg_reserve,
    output wire [15:0]                   HwReg_logoStartX,
    output wire [15:0]                   HwReg_logoStartY,
    output wire [15:0]                   HwReg_logoWidth,
    output wire [15:0]                   HwReg_logoHeight,
    output wire [15:0]                   HwReg_logoScaleFactor,
    output wire [15:0]                   HwReg_logoAlpha,
    output wire [7:0]                    HwReg_logoClrKeyMin_R,
    output wire [7:0]                    HwReg_logoClrKeyMin_G,
    output wire [7:0]                    HwReg_logoClrKeyMin_B,
    output wire [7:0]                    HwReg_logoClrKeyMax_R,
    output wire [7:0]                    HwReg_logoClrKeyMax_G,
    output wire [7:0]                    HwReg_logoClrKeyMax_B,
    input  wire [13:0]                   HwReg_logoR_V_address0,
    input  wire                          HwReg_logoR_V_ce0,
    output wire [7:0]                    HwReg_logoR_V_q0,
    input  wire [13:0]                   HwReg_logoG_V_address0,
    input  wire                          HwReg_logoG_V_ce0,
    output wire [7:0]                    HwReg_logoG_V_q0,
    input  wire [13:0]                   HwReg_logoB_V_address0,
    input  wire                          HwReg_logoB_V_ce0,
    output wire [7:0]                    HwReg_logoB_V_q0,
    output wire                          ap_start,
    input  wire                          ap_done,
    input  wire                          ap_ready,
    input  wire                          ap_idle
);
//------------------------Address Info-------------------
// 0x00000 : Control signals
//           bit 0  - ap_start (Read/Write/COH)
//           bit 1  - ap_done (Read/COR)
//           bit 2  - ap_idle (Read)
//           bit 3  - ap_ready (Read)
//           bit 7  - auto_restart (Read/Write)
//           others - reserved
// 0x00004 : Global Interrupt Enable Register
//           bit 0  - Global Interrupt Enable (Read/Write)
//           others - reserved
// 0x00008 : IP Interrupt Enable Register (Read/Write)
//           bit 0  - Channel 0 (ap_done)
//           bit 1  - Channel 1 (ap_ready)
//           others - reserved
// 0x0000c : IP Interrupt Status Register (Read/TOW)
//           bit 0  - Channel 0 (ap_done)
//           bit 1  - Channel 1 (ap_ready)
//           others - reserved
// 0x00010 : Data signal of HwReg_width
//           bit 15~0 - HwReg_width[15:0] (Read/Write)
//           others   - reserved
// 0x00014 : reserved
// 0x00018 : Data signal of HwReg_height
//           bit 15~0 - HwReg_height[15:0] (Read/Write)
//           others   - reserved
// 0x0001c : reserved
// 0x00020 : Data signal of HwReg_video_format
//           bit 15~0 - HwReg_video_format[15:0] (Read/Write)
//           others   - reserved
// 0x00024 : reserved
// 0x00028 : Data signal of HwReg_background_Y_R
//           bit 15~0 - HwReg_background_Y_R[15:0] (Read/Write)
//           others   - reserved
// 0x0002c : reserved
// 0x00030 : Data signal of HwReg_background_U_G
//           bit 15~0 - HwReg_background_U_G[15:0] (Read/Write)
//           others   - reserved
// 0x00034 : reserved
// 0x00038 : Data signal of HwReg_background_V_B
//           bit 15~0 - HwReg_background_V_B[15:0] (Read/Write)
//           others   - reserved
// 0x0003c : reserved
// 0x00040 : Data signal of HwReg_layerEnable
//           bit 15~0 - HwReg_layerEnable[15:0] (Read/Write)
//           others   - reserved
// 0x00044 : reserved
// 0x00100 : Data signal of HwReg_layerAlpha_0
//           bit 15~0 - HwReg_layerAlpha_0[15:0] (Read/Write)
//           others   - reserved
// 0x00104 : reserved
// 0x00108 : Data signal of HwReg_layerStartX_0
//           bit 15~0 - HwReg_layerStartX_0[15:0] (Read/Write)
//           others   - reserved
// 0x0010c : reserved
// 0x00110 : Data signal of HwReg_layerStartY_0
//           bit 15~0 - HwReg_layerStartY_0[15:0] (Read/Write)
//           others   - reserved
// 0x00114 : reserved
// 0x00118 : Data signal of HwReg_layerWidth_0
//           bit 15~0 - HwReg_layerWidth_0[15:0] (Read/Write)
//           others   - reserved
// 0x0011c : reserved
// 0x00120 : Data signal of HwReg_layerStride_0
//           bit 15~0 - HwReg_layerStride_0[15:0] (Read/Write)
//           others   - reserved
// 0x00124 : reserved
// 0x00128 : Data signal of HwReg_layerHeight_0
//           bit 15~0 - HwReg_layerHeight_0[15:0] (Read/Write)
//           others   - reserved
// 0x0012c : reserved
// 0x00130 : Data signal of HwReg_layerScaleFactor_0
//           bit 7~0 - HwReg_layerScaleFactor_0[7:0] (Read/Write)
//           others  - reserved
// 0x00134 : reserved
// 0x00138 : Data signal of HwReg_layerVideoFormat_0
//           bit 7~0 - HwReg_layerVideoFormat_0[7:0] (Read/Write)
//           others  - reserved
// 0x0013c : reserved
// 0x00200 : Data signal of HwReg_layerAlpha_1
//           bit 15~0 - HwReg_layerAlpha_1[15:0] (Read/Write)
//           others   - reserved
// 0x00204 : reserved
// 0x00208 : Data signal of HwReg_layerStartX_1
//           bit 15~0 - HwReg_layerStartX_1[15:0] (Read/Write)
//           others   - reserved
// 0x0020c : reserved
// 0x00210 : Data signal of HwReg_layerStartY_1
//           bit 15~0 - HwReg_layerStartY_1[15:0] (Read/Write)
//           others   - reserved
// 0x00214 : reserved
// 0x00218 : Data signal of HwReg_layerWidth_1
//           bit 15~0 - HwReg_layerWidth_1[15:0] (Read/Write)
//           others   - reserved
// 0x0021c : reserved
// 0x00220 : Data signal of HwReg_layerStride_1
//           bit 15~0 - HwReg_layerStride_1[15:0] (Read/Write)
//           others   - reserved
// 0x00224 : reserved
// 0x00228 : Data signal of HwReg_layerHeight_1
//           bit 15~0 - HwReg_layerHeight_1[15:0] (Read/Write)
//           others   - reserved
// 0x0022c : reserved
// 0x00230 : Data signal of HwReg_layerScaleFactor_1
//           bit 7~0 - HwReg_layerScaleFactor_1[7:0] (Read/Write)
//           others  - reserved
// 0x00234 : reserved
// 0x00238 : Data signal of HwReg_layerVideoFormat_1
//           bit 7~0 - HwReg_layerVideoFormat_1[7:0] (Read/Write)
//           others  - reserved
// 0x0023c : reserved
// 0x00ff0 : Data signal of HwReg_reserve
//           bit 15~0 - HwReg_reserve[15:0] (Read/Write)
//           others   - reserved
// 0x00ff4 : reserved
// 0x01000 : Data signal of HwReg_logoStartX
//           bit 15~0 - HwReg_logoStartX[15:0] (Read/Write)
//           others   - reserved
// 0x01004 : reserved
// 0x01008 : Data signal of HwReg_logoStartY
//           bit 15~0 - HwReg_logoStartY[15:0] (Read/Write)
//           others   - reserved
// 0x0100c : reserved
// 0x01010 : Data signal of HwReg_logoWidth
//           bit 15~0 - HwReg_logoWidth[15:0] (Read/Write)
//           others   - reserved
// 0x01014 : reserved
// 0x01018 : Data signal of HwReg_logoHeight
//           bit 15~0 - HwReg_logoHeight[15:0] (Read/Write)
//           others   - reserved
// 0x0101c : reserved
// 0x01020 : Data signal of HwReg_logoScaleFactor
//           bit 15~0 - HwReg_logoScaleFactor[15:0] (Read/Write)
//           others   - reserved
// 0x01024 : reserved
// 0x01028 : Data signal of HwReg_logoAlpha
//           bit 15~0 - HwReg_logoAlpha[15:0] (Read/Write)
//           others   - reserved
// 0x0102c : reserved
// 0x01030 : Data signal of HwReg_logoClrKeyMin_R
//           bit 7~0 - HwReg_logoClrKeyMin_R[7:0] (Read/Write)
//           others  - reserved
// 0x01034 : reserved
// 0x01038 : Data signal of HwReg_logoClrKeyMin_G
//           bit 7~0 - HwReg_logoClrKeyMin_G[7:0] (Read/Write)
//           others  - reserved
// 0x0103c : reserved
// 0x01040 : Data signal of HwReg_logoClrKeyMin_B
//           bit 7~0 - HwReg_logoClrKeyMin_B[7:0] (Read/Write)
//           others  - reserved
// 0x01044 : reserved
// 0x01048 : Data signal of HwReg_logoClrKeyMax_R
//           bit 7~0 - HwReg_logoClrKeyMax_R[7:0] (Read/Write)
//           others  - reserved
// 0x0104c : reserved
// 0x01050 : Data signal of HwReg_logoClrKeyMax_G
//           bit 7~0 - HwReg_logoClrKeyMax_G[7:0] (Read/Write)
//           others  - reserved
// 0x01054 : reserved
// 0x01058 : Data signal of HwReg_logoClrKeyMax_B
//           bit 7~0 - HwReg_logoClrKeyMax_B[7:0] (Read/Write)
//           others  - reserved
// 0x0105c : reserved
// 0x10000 ~
// 0x13fff : Memory 'HwReg_logoR_V' (16384 * 8b)
//           Word n : bit [ 7: 0] - HwReg_logoR_V[4n]
//                    bit [15: 8] - HwReg_logoR_V[4n+1]
//                    bit [23:16] - HwReg_logoR_V[4n+2]
//                    bit [31:24] - HwReg_logoR_V[4n+3]
// 0x20000 ~
// 0x23fff : Memory 'HwReg_logoG_V' (16384 * 8b)
//           Word n : bit [ 7: 0] - HwReg_logoG_V[4n]
//                    bit [15: 8] - HwReg_logoG_V[4n+1]
//                    bit [23:16] - HwReg_logoG_V[4n+2]
//                    bit [31:24] - HwReg_logoG_V[4n+3]
// 0x30000 ~
// 0x33fff : Memory 'HwReg_logoB_V' (16384 * 8b)
//           Word n : bit [ 7: 0] - HwReg_logoB_V[4n]
//                    bit [15: 8] - HwReg_logoB_V[4n+1]
//                    bit [23:16] - HwReg_logoB_V[4n+2]
//                    bit [31:24] - HwReg_logoB_V[4n+3]
// (SC = Self Clear, COR = Clear on Read, TOW = Toggle on Write, COH = Clear on Handshake)

//------------------------Parameter----------------------
localparam
    ADDR_AP_CTRL                         = 18'h00000,
    ADDR_GIE                             = 18'h00004,
    ADDR_IER                             = 18'h00008,
    ADDR_ISR                             = 18'h0000c,
    ADDR_HWREG_WIDTH_DATA_0              = 18'h00010,
    ADDR_HWREG_WIDTH_CTRL                = 18'h00014,
    ADDR_HWREG_HEIGHT_DATA_0             = 18'h00018,
    ADDR_HWREG_HEIGHT_CTRL               = 18'h0001c,
    ADDR_HWREG_VIDEO_FORMAT_DATA_0       = 18'h00020,
    ADDR_HWREG_VIDEO_FORMAT_CTRL         = 18'h00024,
    ADDR_HWREG_BACKGROUND_Y_R_DATA_0     = 18'h00028,
    ADDR_HWREG_BACKGROUND_Y_R_CTRL       = 18'h0002c,
    ADDR_HWREG_BACKGROUND_U_G_DATA_0     = 18'h00030,
    ADDR_HWREG_BACKGROUND_U_G_CTRL       = 18'h00034,
    ADDR_HWREG_BACKGROUND_V_B_DATA_0     = 18'h00038,
    ADDR_HWREG_BACKGROUND_V_B_CTRL       = 18'h0003c,
    ADDR_HWREG_LAYERENABLE_DATA_0        = 18'h00040,
    ADDR_HWREG_LAYERENABLE_CTRL          = 18'h00044,
    ADDR_HWREG_LAYERALPHA_0_DATA_0       = 18'h00100,
    ADDR_HWREG_LAYERALPHA_0_CTRL         = 18'h00104,
    ADDR_HWREG_LAYERSTARTX_0_DATA_0      = 18'h00108,
    ADDR_HWREG_LAYERSTARTX_0_CTRL        = 18'h0010c,
    ADDR_HWREG_LAYERSTARTY_0_DATA_0      = 18'h00110,
    ADDR_HWREG_LAYERSTARTY_0_CTRL        = 18'h00114,
    ADDR_HWREG_LAYERWIDTH_0_DATA_0       = 18'h00118,
    ADDR_HWREG_LAYERWIDTH_0_CTRL         = 18'h0011c,
    ADDR_HWREG_LAYERSTRIDE_0_DATA_0      = 18'h00120,
    ADDR_HWREG_LAYERSTRIDE_0_CTRL        = 18'h00124,
    ADDR_HWREG_LAYERHEIGHT_0_DATA_0      = 18'h00128,
    ADDR_HWREG_LAYERHEIGHT_0_CTRL        = 18'h0012c,
    ADDR_HWREG_LAYERSCALEFACTOR_0_DATA_0 = 18'h00130,
    ADDR_HWREG_LAYERSCALEFACTOR_0_CTRL   = 18'h00134,
    ADDR_HWREG_LAYERVIDEOFORMAT_0_DATA_0 = 18'h00138,
    ADDR_HWREG_LAYERVIDEOFORMAT_0_CTRL   = 18'h0013c,
    ADDR_HWREG_LAYERALPHA_1_DATA_0       = 18'h00200,
    ADDR_HWREG_LAYERALPHA_1_CTRL         = 18'h00204,
    ADDR_HWREG_LAYERSTARTX_1_DATA_0      = 18'h00208,
    ADDR_HWREG_LAYERSTARTX_1_CTRL        = 18'h0020c,
    ADDR_HWREG_LAYERSTARTY_1_DATA_0      = 18'h00210,
    ADDR_HWREG_LAYERSTARTY_1_CTRL        = 18'h00214,
    ADDR_HWREG_LAYERWIDTH_1_DATA_0       = 18'h00218,
    ADDR_HWREG_LAYERWIDTH_1_CTRL         = 18'h0021c,
    ADDR_HWREG_LAYERSTRIDE_1_DATA_0      = 18'h00220,
    ADDR_HWREG_LAYERSTRIDE_1_CTRL        = 18'h00224,
    ADDR_HWREG_LAYERHEIGHT_1_DATA_0      = 18'h00228,
    ADDR_HWREG_LAYERHEIGHT_1_CTRL        = 18'h0022c,
    ADDR_HWREG_LAYERSCALEFACTOR_1_DATA_0 = 18'h00230,
    ADDR_HWREG_LAYERSCALEFACTOR_1_CTRL   = 18'h00234,
    ADDR_HWREG_LAYERVIDEOFORMAT_1_DATA_0 = 18'h00238,
    ADDR_HWREG_LAYERVIDEOFORMAT_1_CTRL   = 18'h0023c,
    ADDR_HWREG_RESERVE_DATA_0            = 18'h00ff0,
    ADDR_HWREG_RESERVE_CTRL              = 18'h00ff4,
    ADDR_HWREG_LOGOSTARTX_DATA_0         = 18'h01000,
    ADDR_HWREG_LOGOSTARTX_CTRL           = 18'h01004,
    ADDR_HWREG_LOGOSTARTY_DATA_0         = 18'h01008,
    ADDR_HWREG_LOGOSTARTY_CTRL           = 18'h0100c,
    ADDR_HWREG_LOGOWIDTH_DATA_0          = 18'h01010,
    ADDR_HWREG_LOGOWIDTH_CTRL            = 18'h01014,
    ADDR_HWREG_LOGOHEIGHT_DATA_0         = 18'h01018,
    ADDR_HWREG_LOGOHEIGHT_CTRL           = 18'h0101c,
    ADDR_HWREG_LOGOSCALEFACTOR_DATA_0    = 18'h01020,
    ADDR_HWREG_LOGOSCALEFACTOR_CTRL      = 18'h01024,
    ADDR_HWREG_LOGOALPHA_DATA_0          = 18'h01028,
    ADDR_HWREG_LOGOALPHA_CTRL            = 18'h0102c,
    ADDR_HWREG_LOGOCLRKEYMIN_R_DATA_0    = 18'h01030,
    ADDR_HWREG_LOGOCLRKEYMIN_R_CTRL      = 18'h01034,
    ADDR_HWREG_LOGOCLRKEYMIN_G_DATA_0    = 18'h01038,
    ADDR_HWREG_LOGOCLRKEYMIN_G_CTRL      = 18'h0103c,
    ADDR_HWREG_LOGOCLRKEYMIN_B_DATA_0    = 18'h01040,
    ADDR_HWREG_LOGOCLRKEYMIN_B_CTRL      = 18'h01044,
    ADDR_HWREG_LOGOCLRKEYMAX_R_DATA_0    = 18'h01048,
    ADDR_HWREG_LOGOCLRKEYMAX_R_CTRL      = 18'h0104c,
    ADDR_HWREG_LOGOCLRKEYMAX_G_DATA_0    = 18'h01050,
    ADDR_HWREG_LOGOCLRKEYMAX_G_CTRL      = 18'h01054,
    ADDR_HWREG_LOGOCLRKEYMAX_B_DATA_0    = 18'h01058,
    ADDR_HWREG_LOGOCLRKEYMAX_B_CTRL      = 18'h0105c,
    ADDR_HWREG_LOGOR_V_BASE              = 18'h10000,
    ADDR_HWREG_LOGOR_V_HIGH              = 18'h13fff,
    ADDR_HWREG_LOGOG_V_BASE              = 18'h20000,
    ADDR_HWREG_LOGOG_V_HIGH              = 18'h23fff,
    ADDR_HWREG_LOGOB_V_BASE              = 18'h30000,
    ADDR_HWREG_LOGOB_V_HIGH              = 18'h33fff,
    WRIDLE                               = 2'd0,
    WRDATA                               = 2'd1,
    WRRESP                               = 2'd2,
    WRRESET                              = 2'd3,
    RDIDLE                               = 2'd0,
    RDDATA                               = 2'd1,
    RDRESET                              = 2'd2,
    ADDR_BITS         = 18;

//------------------------Local signal-------------------
    reg  [1:0]                    wstate = WRRESET;
    reg  [1:0]                    wnext;
    reg  [ADDR_BITS-1:0]          waddr;
    wire [31:0]                   wmask;
    wire                          aw_hs;
    wire                          w_hs;
    reg  [1:0]                    rstate = RDRESET;
    reg  [1:0]                    rnext;
    reg  [31:0]                   rdata;
    wire                          ar_hs;
    wire [ADDR_BITS-1:0]          raddr;
    // internal registers
    reg                           int_ap_idle;
    reg                           int_ap_ready;
    reg                           int_ap_done = 1'b0;
    reg                           int_ap_start = 1'b0;
    reg                           int_auto_restart = 1'b0;
    reg                           int_gie = 1'b0;
    reg  [1:0]                    int_ier = 2'b0;
    reg  [1:0]                    int_isr = 2'b0;
    reg  [15:0]                   int_HwReg_width = 'b0;
    reg  [15:0]                   int_HwReg_height = 'b0;
    reg  [15:0]                   int_HwReg_video_format = 'b0;
    reg  [15:0]                   int_HwReg_background_Y_R = 'b0;
    reg  [15:0]                   int_HwReg_background_U_G = 'b0;
    reg  [15:0]                   int_HwReg_background_V_B = 'b0;
    reg  [15:0]                   int_HwReg_layerEnable = 'b0;
    reg  [15:0]                   int_HwReg_layerAlpha_0 = 'b0;
    reg  [15:0]                   int_HwReg_layerStartX_0 = 'b0;
    reg  [15:0]                   int_HwReg_layerStartY_0 = 'b0;
    reg  [15:0]                   int_HwReg_layerWidth_0 = 'b0;
    reg  [15:0]                   int_HwReg_layerStride_0 = 'b0;
    reg  [15:0]                   int_HwReg_layerHeight_0 = 'b0;
    reg  [7:0]                    int_HwReg_layerScaleFactor_0 = 'b0;
    reg  [7:0]                    int_HwReg_layerVideoFormat_0 = 'b0;
    reg  [15:0]                   int_HwReg_layerAlpha_1 = 'b0;
    reg  [15:0]                   int_HwReg_layerStartX_1 = 'b0;
    reg  [15:0]                   int_HwReg_layerStartY_1 = 'b0;
    reg  [15:0]                   int_HwReg_layerWidth_1 = 'b0;
    reg  [15:0]                   int_HwReg_layerStride_1 = 'b0;
    reg  [15:0]                   int_HwReg_layerHeight_1 = 'b0;
    reg  [7:0]                    int_HwReg_layerScaleFactor_1 = 'b0;
    reg  [7:0]                    int_HwReg_layerVideoFormat_1 = 'b0;
    reg  [15:0]                   int_HwReg_reserve = 'b0;
    reg  [15:0]                   int_HwReg_logoStartX = 'b0;
    reg  [15:0]                   int_HwReg_logoStartY = 'b0;
    reg  [15:0]                   int_HwReg_logoWidth = 'b0;
    reg  [15:0]                   int_HwReg_logoHeight = 'b0;
    reg  [15:0]                   int_HwReg_logoScaleFactor = 'b0;
    reg  [15:0]                   int_HwReg_logoAlpha = 'b0;
    reg  [7:0]                    int_HwReg_logoClrKeyMin_R = 'b0;
    reg  [7:0]                    int_HwReg_logoClrKeyMin_G = 'b0;
    reg  [7:0]                    int_HwReg_logoClrKeyMin_B = 'b0;
    reg  [7:0]                    int_HwReg_logoClrKeyMax_R = 'b0;
    reg  [7:0]                    int_HwReg_logoClrKeyMax_G = 'b0;
    reg  [7:0]                    int_HwReg_logoClrKeyMax_B = 'b0;
    // memory signals
    wire [11:0]                   int_HwReg_logoR_V_address0;
    wire                          int_HwReg_logoR_V_ce0;
    wire                          int_HwReg_logoR_V_we0;
    wire [3:0]                    int_HwReg_logoR_V_be0;
    wire [31:0]                   int_HwReg_logoR_V_d0;
    wire [31:0]                   int_HwReg_logoR_V_q0;
    wire [11:0]                   int_HwReg_logoR_V_address1;
    wire                          int_HwReg_logoR_V_ce1;
    wire                          int_HwReg_logoR_V_we1;
    wire [3:0]                    int_HwReg_logoR_V_be1;
    wire [31:0]                   int_HwReg_logoR_V_d1;
    wire [31:0]                   int_HwReg_logoR_V_q1;
    reg                           int_HwReg_logoR_V_read;
    reg                           int_HwReg_logoR_V_write;
    reg  [1:0]                    int_HwReg_logoR_V_shift;
    wire [11:0]                   int_HwReg_logoG_V_address0;
    wire                          int_HwReg_logoG_V_ce0;
    wire                          int_HwReg_logoG_V_we0;
    wire [3:0]                    int_HwReg_logoG_V_be0;
    wire [31:0]                   int_HwReg_logoG_V_d0;
    wire [31:0]                   int_HwReg_logoG_V_q0;
    wire [11:0]                   int_HwReg_logoG_V_address1;
    wire                          int_HwReg_logoG_V_ce1;
    wire                          int_HwReg_logoG_V_we1;
    wire [3:0]                    int_HwReg_logoG_V_be1;
    wire [31:0]                   int_HwReg_logoG_V_d1;
    wire [31:0]                   int_HwReg_logoG_V_q1;
    reg                           int_HwReg_logoG_V_read;
    reg                           int_HwReg_logoG_V_write;
    reg  [1:0]                    int_HwReg_logoG_V_shift;
    wire [11:0]                   int_HwReg_logoB_V_address0;
    wire                          int_HwReg_logoB_V_ce0;
    wire                          int_HwReg_logoB_V_we0;
    wire [3:0]                    int_HwReg_logoB_V_be0;
    wire [31:0]                   int_HwReg_logoB_V_d0;
    wire [31:0]                   int_HwReg_logoB_V_q0;
    wire [11:0]                   int_HwReg_logoB_V_address1;
    wire                          int_HwReg_logoB_V_ce1;
    wire                          int_HwReg_logoB_V_we1;
    wire [3:0]                    int_HwReg_logoB_V_be1;
    wire [31:0]                   int_HwReg_logoB_V_d1;
    wire [31:0]                   int_HwReg_logoB_V_q1;
    reg                           int_HwReg_logoB_V_read;
    reg                           int_HwReg_logoB_V_write;
    reg  [1:0]                    int_HwReg_logoB_V_shift;

//------------------------Instantiation------------------
// int_HwReg_logoR_V
hdmi_v_mix_0_0_v_mix_CTRL_s_axi_ram #(
    .BYTES    ( 4 ),
    .DEPTH    ( 4096 )
) int_HwReg_logoR_V (
    .clk0     ( ACLK ),
    .address0 ( int_HwReg_logoR_V_address0 ),
    .ce0      ( int_HwReg_logoR_V_ce0 ),
    .we0      ( int_HwReg_logoR_V_we0 ),
    .be0      ( int_HwReg_logoR_V_be0 ),
    .d0       ( int_HwReg_logoR_V_d0 ),
    .q0       ( int_HwReg_logoR_V_q0 ),
    .clk1     ( ACLK ),
    .address1 ( int_HwReg_logoR_V_address1 ),
    .ce1      ( int_HwReg_logoR_V_ce1 ),
    .we1      ( int_HwReg_logoR_V_we1 ),
    .be1      ( int_HwReg_logoR_V_be1 ),
    .d1       ( int_HwReg_logoR_V_d1 ),
    .q1       ( int_HwReg_logoR_V_q1 )
);
// int_HwReg_logoG_V
hdmi_v_mix_0_0_v_mix_CTRL_s_axi_ram #(
    .BYTES    ( 4 ),
    .DEPTH    ( 4096 )
) int_HwReg_logoG_V (
    .clk0     ( ACLK ),
    .address0 ( int_HwReg_logoG_V_address0 ),
    .ce0      ( int_HwReg_logoG_V_ce0 ),
    .we0      ( int_HwReg_logoG_V_we0 ),
    .be0      ( int_HwReg_logoG_V_be0 ),
    .d0       ( int_HwReg_logoG_V_d0 ),
    .q0       ( int_HwReg_logoG_V_q0 ),
    .clk1     ( ACLK ),
    .address1 ( int_HwReg_logoG_V_address1 ),
    .ce1      ( int_HwReg_logoG_V_ce1 ),
    .we1      ( int_HwReg_logoG_V_we1 ),
    .be1      ( int_HwReg_logoG_V_be1 ),
    .d1       ( int_HwReg_logoG_V_d1 ),
    .q1       ( int_HwReg_logoG_V_q1 )
);
// int_HwReg_logoB_V
hdmi_v_mix_0_0_v_mix_CTRL_s_axi_ram #(
    .BYTES    ( 4 ),
    .DEPTH    ( 4096 )
) int_HwReg_logoB_V (
    .clk0     ( ACLK ),
    .address0 ( int_HwReg_logoB_V_address0 ),
    .ce0      ( int_HwReg_logoB_V_ce0 ),
    .we0      ( int_HwReg_logoB_V_we0 ),
    .be0      ( int_HwReg_logoB_V_be0 ),
    .d0       ( int_HwReg_logoB_V_d0 ),
    .q0       ( int_HwReg_logoB_V_q0 ),
    .clk1     ( ACLK ),
    .address1 ( int_HwReg_logoB_V_address1 ),
    .ce1      ( int_HwReg_logoB_V_ce1 ),
    .we1      ( int_HwReg_logoB_V_we1 ),
    .be1      ( int_HwReg_logoB_V_be1 ),
    .d1       ( int_HwReg_logoB_V_d1 ),
    .q1       ( int_HwReg_logoB_V_q1 )
);

//------------------------AXI write fsm------------------
assign AWREADY = (wstate == WRIDLE);
assign WREADY  = (wstate == WRDATA);
assign BRESP   = 2'b00;  // OKAY
assign BVALID  = (wstate == WRRESP);
assign wmask   = { {8{WSTRB[3]}}, {8{WSTRB[2]}}, {8{WSTRB[1]}}, {8{WSTRB[0]}} };
assign aw_hs   = AWVALID & AWREADY;
assign w_hs    = WVALID & WREADY;

// wstate
always @(posedge ACLK) begin
    if (ARESET)
        wstate <= WRRESET;
    else if (ACLK_EN)
        wstate <= wnext;
end

// wnext
always @(*) begin
    case (wstate)
        WRIDLE:
            if (AWVALID)
                wnext = WRDATA;
            else
                wnext = WRIDLE;
        WRDATA:
            if (WVALID)
                wnext = WRRESP;
            else
                wnext = WRDATA;
        WRRESP:
            if (BREADY)
                wnext = WRIDLE;
            else
                wnext = WRRESP;
        default:
            wnext = WRIDLE;
    endcase
end

// waddr
always @(posedge ACLK) begin
    if (ACLK_EN) begin
        if (aw_hs)
            waddr <= AWADDR[ADDR_BITS-1:0];
    end
end

//------------------------AXI read fsm-------------------
assign ARREADY = (rstate == RDIDLE);
assign RDATA   = rdata;
assign RRESP   = 2'b00;  // OKAY
assign RVALID  = (rstate == RDDATA) & !int_HwReg_logoR_V_read & !int_HwReg_logoG_V_read & !int_HwReg_logoB_V_read;
assign ar_hs   = ARVALID & ARREADY;
assign raddr   = ARADDR[ADDR_BITS-1:0];

// rstate
always @(posedge ACLK) begin
    if (ARESET)
        rstate <= RDRESET;
    else if (ACLK_EN)
        rstate <= rnext;
end

// rnext
always @(*) begin
    case (rstate)
        RDIDLE:
            if (ARVALID)
                rnext = RDDATA;
            else
                rnext = RDIDLE;
        RDDATA:
            if (RREADY & RVALID)
                rnext = RDIDLE;
            else
                rnext = RDDATA;
        default:
            rnext = RDIDLE;
    endcase
end

// rdata
always @(posedge ACLK) begin
    if (ACLK_EN) begin
        if (ar_hs) begin
            rdata <= 1'b0;
            case (raddr)
                ADDR_AP_CTRL: begin
                    rdata[0] <= int_ap_start;
                    rdata[1] <= int_ap_done;
                    rdata[2] <= int_ap_idle;
                    rdata[3] <= int_ap_ready;
                    rdata[7] <= int_auto_restart;
                end
                ADDR_GIE: begin
                    rdata <= int_gie;
                end
                ADDR_IER: begin
                    rdata <= int_ier;
                end
                ADDR_ISR: begin
                    rdata <= int_isr;
                end
                ADDR_HWREG_WIDTH_DATA_0: begin
                    rdata <= int_HwReg_width[15:0];
                end
                ADDR_HWREG_HEIGHT_DATA_0: begin
                    rdata <= int_HwReg_height[15:0];
                end
                ADDR_HWREG_VIDEO_FORMAT_DATA_0: begin
                    rdata <= int_HwReg_video_format[15:0];
                end
                ADDR_HWREG_BACKGROUND_Y_R_DATA_0: begin
                    rdata <= int_HwReg_background_Y_R[15:0];
                end
                ADDR_HWREG_BACKGROUND_U_G_DATA_0: begin
                    rdata <= int_HwReg_background_U_G[15:0];
                end
                ADDR_HWREG_BACKGROUND_V_B_DATA_0: begin
                    rdata <= int_HwReg_background_V_B[15:0];
                end
                ADDR_HWREG_LAYERENABLE_DATA_0: begin
                    rdata <= int_HwReg_layerEnable[15:0];
                end
                ADDR_HWREG_LAYERALPHA_0_DATA_0: begin
                    rdata <= int_HwReg_layerAlpha_0[15:0];
                end
                ADDR_HWREG_LAYERSTARTX_0_DATA_0: begin
                    rdata <= int_HwReg_layerStartX_0[15:0];
                end
                ADDR_HWREG_LAYERSTARTY_0_DATA_0: begin
                    rdata <= int_HwReg_layerStartY_0[15:0];
                end
                ADDR_HWREG_LAYERWIDTH_0_DATA_0: begin
                    rdata <= int_HwReg_layerWidth_0[15:0];
                end
                ADDR_HWREG_LAYERSTRIDE_0_DATA_0: begin
                    rdata <= int_HwReg_layerStride_0[15:0];
                end
                ADDR_HWREG_LAYERHEIGHT_0_DATA_0: begin
                    rdata <= int_HwReg_layerHeight_0[15:0];
                end
                ADDR_HWREG_LAYERSCALEFACTOR_0_DATA_0: begin
                    rdata <= int_HwReg_layerScaleFactor_0[7:0];
                end
                ADDR_HWREG_LAYERVIDEOFORMAT_0_DATA_0: begin
                    rdata <= int_HwReg_layerVideoFormat_0[7:0];
                end
                ADDR_HWREG_LAYERALPHA_1_DATA_0: begin
                    rdata <= int_HwReg_layerAlpha_1[15:0];
                end
                ADDR_HWREG_LAYERSTARTX_1_DATA_0: begin
                    rdata <= int_HwReg_layerStartX_1[15:0];
                end
                ADDR_HWREG_LAYERSTARTY_1_DATA_0: begin
                    rdata <= int_HwReg_layerStartY_1[15:0];
                end
                ADDR_HWREG_LAYERWIDTH_1_DATA_0: begin
                    rdata <= int_HwReg_layerWidth_1[15:0];
                end
                ADDR_HWREG_LAYERSTRIDE_1_DATA_0: begin
                    rdata <= int_HwReg_layerStride_1[15:0];
                end
                ADDR_HWREG_LAYERHEIGHT_1_DATA_0: begin
                    rdata <= int_HwReg_layerHeight_1[15:0];
                end
                ADDR_HWREG_LAYERSCALEFACTOR_1_DATA_0: begin
                    rdata <= int_HwReg_layerScaleFactor_1[7:0];
                end
                ADDR_HWREG_LAYERVIDEOFORMAT_1_DATA_0: begin
                    rdata <= int_HwReg_layerVideoFormat_1[7:0];
                end
                ADDR_HWREG_RESERVE_DATA_0: begin
                    rdata <= int_HwReg_reserve[15:0];
                end
                ADDR_HWREG_LOGOSTARTX_DATA_0: begin
                    rdata <= int_HwReg_logoStartX[15:0];
                end
                ADDR_HWREG_LOGOSTARTY_DATA_0: begin
                    rdata <= int_HwReg_logoStartY[15:0];
                end
                ADDR_HWREG_LOGOWIDTH_DATA_0: begin
                    rdata <= int_HwReg_logoWidth[15:0];
                end
                ADDR_HWREG_LOGOHEIGHT_DATA_0: begin
                    rdata <= int_HwReg_logoHeight[15:0];
                end
                ADDR_HWREG_LOGOSCALEFACTOR_DATA_0: begin
                    rdata <= int_HwReg_logoScaleFactor[15:0];
                end
                ADDR_HWREG_LOGOALPHA_DATA_0: begin
                    rdata <= int_HwReg_logoAlpha[15:0];
                end
                ADDR_HWREG_LOGOCLRKEYMIN_R_DATA_0: begin
                    rdata <= int_HwReg_logoClrKeyMin_R[7:0];
                end
                ADDR_HWREG_LOGOCLRKEYMIN_G_DATA_0: begin
                    rdata <= int_HwReg_logoClrKeyMin_G[7:0];
                end
                ADDR_HWREG_LOGOCLRKEYMIN_B_DATA_0: begin
                    rdata <= int_HwReg_logoClrKeyMin_B[7:0];
                end
                ADDR_HWREG_LOGOCLRKEYMAX_R_DATA_0: begin
                    rdata <= int_HwReg_logoClrKeyMax_R[7:0];
                end
                ADDR_HWREG_LOGOCLRKEYMAX_G_DATA_0: begin
                    rdata <= int_HwReg_logoClrKeyMax_G[7:0];
                end
                ADDR_HWREG_LOGOCLRKEYMAX_B_DATA_0: begin
                    rdata <= int_HwReg_logoClrKeyMax_B[7:0];
                end
            endcase
        end
        else if (int_HwReg_logoR_V_read) begin
            rdata <= int_HwReg_logoR_V_q1;
        end
        else if (int_HwReg_logoG_V_read) begin
            rdata <= int_HwReg_logoG_V_q1;
        end
        else if (int_HwReg_logoB_V_read) begin
            rdata <= int_HwReg_logoB_V_q1;
        end
    end
end


//------------------------Register logic-----------------
assign interrupt                = int_gie & (|int_isr);
assign ap_start                 = int_ap_start;
assign HwReg_width              = int_HwReg_width;
assign HwReg_height             = int_HwReg_height;
assign HwReg_video_format       = int_HwReg_video_format;
assign HwReg_background_Y_R     = int_HwReg_background_Y_R;
assign HwReg_background_U_G     = int_HwReg_background_U_G;
assign HwReg_background_V_B     = int_HwReg_background_V_B;
assign HwReg_layerEnable        = int_HwReg_layerEnable;
assign HwReg_layerAlpha_0       = int_HwReg_layerAlpha_0;
assign HwReg_layerStartX_0      = int_HwReg_layerStartX_0;
assign HwReg_layerStartY_0      = int_HwReg_layerStartY_0;
assign HwReg_layerWidth_0       = int_HwReg_layerWidth_0;
assign HwReg_layerStride_0      = int_HwReg_layerStride_0;
assign HwReg_layerHeight_0      = int_HwReg_layerHeight_0;
assign HwReg_layerScaleFactor_0 = int_HwReg_layerScaleFactor_0;
assign HwReg_layerVideoFormat_0 = int_HwReg_layerVideoFormat_0;
assign HwReg_layerAlpha_1       = int_HwReg_layerAlpha_1;
assign HwReg_layerStartX_1      = int_HwReg_layerStartX_1;
assign HwReg_layerStartY_1      = int_HwReg_layerStartY_1;
assign HwReg_layerWidth_1       = int_HwReg_layerWidth_1;
assign HwReg_layerStride_1      = int_HwReg_layerStride_1;
assign HwReg_layerHeight_1      = int_HwReg_layerHeight_1;
assign HwReg_layerScaleFactor_1 = int_HwReg_layerScaleFactor_1;
assign HwReg_layerVideoFormat_1 = int_HwReg_layerVideoFormat_1;
assign HwReg_reserve            = int_HwReg_reserve;
assign HwReg_logoStartX         = int_HwReg_logoStartX;
assign HwReg_logoStartY         = int_HwReg_logoStartY;
assign HwReg_logoWidth          = int_HwReg_logoWidth;
assign HwReg_logoHeight         = int_HwReg_logoHeight;
assign HwReg_logoScaleFactor    = int_HwReg_logoScaleFactor;
assign HwReg_logoAlpha          = int_HwReg_logoAlpha;
assign HwReg_logoClrKeyMin_R    = int_HwReg_logoClrKeyMin_R;
assign HwReg_logoClrKeyMin_G    = int_HwReg_logoClrKeyMin_G;
assign HwReg_logoClrKeyMin_B    = int_HwReg_logoClrKeyMin_B;
assign HwReg_logoClrKeyMax_R    = int_HwReg_logoClrKeyMax_R;
assign HwReg_logoClrKeyMax_G    = int_HwReg_logoClrKeyMax_G;
assign HwReg_logoClrKeyMax_B    = int_HwReg_logoClrKeyMax_B;
// int_ap_start
always @(posedge ACLK) begin
    if (ARESET)
        int_ap_start <= 1'b0;
    else if (ACLK_EN) begin
        if (w_hs && waddr == ADDR_AP_CTRL && WSTRB[0] && WDATA[0])
            int_ap_start <= 1'b1;
        else if (ap_ready)
            int_ap_start <= int_auto_restart; // clear on handshake/auto restart
    end
end

// int_ap_done
always @(posedge ACLK) begin
    if (ARESET)
        int_ap_done <= 1'b0;
    else if (ACLK_EN) begin
        if (ap_done)
            int_ap_done <= 1'b1;
        else if (ar_hs && raddr == ADDR_AP_CTRL)
            int_ap_done <= 1'b0; // clear on read
    end
end

// int_ap_idle
always @(posedge ACLK) begin
    if (ARESET)
        int_ap_idle <= 1'b0;
    else if (ACLK_EN) begin
            int_ap_idle <= ap_idle;
    end
end

// int_ap_ready
always @(posedge ACLK) begin
    if (ARESET)
        int_ap_ready <= 1'b0;
    else if (ACLK_EN) begin
            int_ap_ready <= ap_ready;
    end
end

// int_auto_restart
always @(posedge ACLK) begin
    if (ARESET)
        int_auto_restart <= 1'b0;
    else if (ACLK_EN) begin
        if (w_hs && waddr == ADDR_AP_CTRL && WSTRB[0])
            int_auto_restart <=  WDATA[7];
    end
end

// int_gie
always @(posedge ACLK) begin
    if (ARESET)
        int_gie <= 1'b0;
    else if (ACLK_EN) begin
        if (w_hs && waddr == ADDR_GIE && WSTRB[0])
            int_gie <= WDATA[0];
    end
end

// int_ier
always @(posedge ACLK) begin
    if (ARESET)
        int_ier <= 1'b0;
    else if (ACLK_EN) begin
        if (w_hs && waddr == ADDR_IER && WSTRB[0])
            int_ier <= WDATA[1:0];
    end
end

// int_isr[0]
always @(posedge ACLK) begin
    if (ARESET)
        int_isr[0] <= 1'b0;
    else if (ACLK_EN) begin
        if (int_ier[0] & ap_done)
            int_isr[0] <= 1'b1;
        else if (w_hs && waddr == ADDR_ISR && WSTRB[0])
            int_isr[0] <= int_isr[0] ^ WDATA[0]; // toggle on write
    end
end

// int_isr[1]
always @(posedge ACLK) begin
    if (ARESET)
        int_isr[1] <= 1'b0;
    else if (ACLK_EN) begin
        if (int_ier[1] & ap_ready)
            int_isr[1] <= 1'b1;
        else if (w_hs && waddr == ADDR_ISR && WSTRB[0])
            int_isr[1] <= int_isr[1] ^ WDATA[1]; // toggle on write
    end
end

// int_HwReg_width[15:0]
always @(posedge ACLK) begin
    if (ARESET)
        int_HwReg_width[15:0] <= 0;
    else if (ACLK_EN) begin
        if (w_hs && waddr == ADDR_HWREG_WIDTH_DATA_0)
            int_HwReg_width[15:0] <= (WDATA[31:0] & wmask) | (int_HwReg_width[15:0] & ~wmask);
    end
end

// int_HwReg_height[15:0]
always @(posedge ACLK) begin
    if (ARESET)
        int_HwReg_height[15:0] <= 0;
    else if (ACLK_EN) begin
        if (w_hs && waddr == ADDR_HWREG_HEIGHT_DATA_0)
            int_HwReg_height[15:0] <= (WDATA[31:0] & wmask) | (int_HwReg_height[15:0] & ~wmask);
    end
end

// int_HwReg_video_format[15:0]
always @(posedge ACLK) begin
    if (ARESET)
        int_HwReg_video_format[15:0] <= 0;
    else if (ACLK_EN) begin
        if (w_hs && waddr == ADDR_HWREG_VIDEO_FORMAT_DATA_0)
            int_HwReg_video_format[15:0] <= (WDATA[31:0] & wmask) | (int_HwReg_video_format[15:0] & ~wmask);
    end
end

// int_HwReg_background_Y_R[15:0]
always @(posedge ACLK) begin
    if (ARESET)
        int_HwReg_background_Y_R[15:0] <= 0;
    else if (ACLK_EN) begin
        if (w_hs && waddr == ADDR_HWREG_BACKGROUND_Y_R_DATA_0)
            int_HwReg_background_Y_R[15:0] <= (WDATA[31:0] & wmask) | (int_HwReg_background_Y_R[15:0] & ~wmask);
    end
end

// int_HwReg_background_U_G[15:0]
always @(posedge ACLK) begin
    if (ARESET)
        int_HwReg_background_U_G[15:0] <= 0;
    else if (ACLK_EN) begin
        if (w_hs && waddr == ADDR_HWREG_BACKGROUND_U_G_DATA_0)
            int_HwReg_background_U_G[15:0] <= (WDATA[31:0] & wmask) | (int_HwReg_background_U_G[15:0] & ~wmask);
    end
end

// int_HwReg_background_V_B[15:0]
always @(posedge ACLK) begin
    if (ARESET)
        int_HwReg_background_V_B[15:0] <= 0;
    else if (ACLK_EN) begin
        if (w_hs && waddr == ADDR_HWREG_BACKGROUND_V_B_DATA_0)
            int_HwReg_background_V_B[15:0] <= (WDATA[31:0] & wmask) | (int_HwReg_background_V_B[15:0] & ~wmask);
    end
end

// int_HwReg_layerEnable[15:0]
always @(posedge ACLK) begin
    if (ARESET)
        int_HwReg_layerEnable[15:0] <= 0;
    else if (ACLK_EN) begin
        if (w_hs && waddr == ADDR_HWREG_LAYERENABLE_DATA_0)
            int_HwReg_layerEnable[15:0] <= (WDATA[31:0] & wmask) | (int_HwReg_layerEnable[15:0] & ~wmask);
    end
end

// int_HwReg_layerAlpha_0[15:0]
always @(posedge ACLK) begin
    if (ARESET)
        int_HwReg_layerAlpha_0[15:0] <= 0;
    else if (ACLK_EN) begin
        if (w_hs && waddr == ADDR_HWREG_LAYERALPHA_0_DATA_0)
            int_HwReg_layerAlpha_0[15:0] <= (WDATA[31:0] & wmask) | (int_HwReg_layerAlpha_0[15:0] & ~wmask);
    end
end

// int_HwReg_layerStartX_0[15:0]
always @(posedge ACLK) begin
    if (ARESET)
        int_HwReg_layerStartX_0[15:0] <= 0;
    else if (ACLK_EN) begin
        if (w_hs && waddr == ADDR_HWREG_LAYERSTARTX_0_DATA_0)
            int_HwReg_layerStartX_0[15:0] <= (WDATA[31:0] & wmask) | (int_HwReg_layerStartX_0[15:0] & ~wmask);
    end
end

// int_HwReg_layerStartY_0[15:0]
always @(posedge ACLK) begin
    if (ARESET)
        int_HwReg_layerStartY_0[15:0] <= 0;
    else if (ACLK_EN) begin
        if (w_hs && waddr == ADDR_HWREG_LAYERSTARTY_0_DATA_0)
            int_HwReg_layerStartY_0[15:0] <= (WDATA[31:0] & wmask) | (int_HwReg_layerStartY_0[15:0] & ~wmask);
    end
end

// int_HwReg_layerWidth_0[15:0]
always @(posedge ACLK) begin
    if (ARESET)
        int_HwReg_layerWidth_0[15:0] <= 0;
    else if (ACLK_EN) begin
        if (w_hs && waddr == ADDR_HWREG_LAYERWIDTH_0_DATA_0)
            int_HwReg_layerWidth_0[15:0] <= (WDATA[31:0] & wmask) | (int_HwReg_layerWidth_0[15:0] & ~wmask);
    end
end

// int_HwReg_layerStride_0[15:0]
always @(posedge ACLK) begin
    if (ARESET)
        int_HwReg_layerStride_0[15:0] <= 0;
    else if (ACLK_EN) begin
        if (w_hs && waddr == ADDR_HWREG_LAYERSTRIDE_0_DATA_0)
            int_HwReg_layerStride_0[15:0] <= (WDATA[31:0] & wmask) | (int_HwReg_layerStride_0[15:0] & ~wmask);
    end
end

// int_HwReg_layerHeight_0[15:0]
always @(posedge ACLK) begin
    if (ARESET)
        int_HwReg_layerHeight_0[15:0] <= 0;
    else if (ACLK_EN) begin
        if (w_hs && waddr == ADDR_HWREG_LAYERHEIGHT_0_DATA_0)
            int_HwReg_layerHeight_0[15:0] <= (WDATA[31:0] & wmask) | (int_HwReg_layerHeight_0[15:0] & ~wmask);
    end
end

// int_HwReg_layerScaleFactor_0[7:0]
always @(posedge ACLK) begin
    if (ARESET)
        int_HwReg_layerScaleFactor_0[7:0] <= 0;
    else if (ACLK_EN) begin
        if (w_hs && waddr == ADDR_HWREG_LAYERSCALEFACTOR_0_DATA_0)
            int_HwReg_layerScaleFactor_0[7:0] <= (WDATA[31:0] & wmask) | (int_HwReg_layerScaleFactor_0[7:0] & ~wmask);
    end
end

// int_HwReg_layerVideoFormat_0[7:0]
always @(posedge ACLK) begin
    if (ARESET)
        int_HwReg_layerVideoFormat_0[7:0] <= 0;
    else if (ACLK_EN) begin
        if (w_hs && waddr == ADDR_HWREG_LAYERVIDEOFORMAT_0_DATA_0)
            int_HwReg_layerVideoFormat_0[7:0] <= (WDATA[31:0] & wmask) | (int_HwReg_layerVideoFormat_0[7:0] & ~wmask);
    end
end

// int_HwReg_layerAlpha_1[15:0]
always @(posedge ACLK) begin
    if (ARESET)
        int_HwReg_layerAlpha_1[15:0] <= 0;
    else if (ACLK_EN) begin
        if (w_hs && waddr == ADDR_HWREG_LAYERALPHA_1_DATA_0)
            int_HwReg_layerAlpha_1[15:0] <= (WDATA[31:0] & wmask) | (int_HwReg_layerAlpha_1[15:0] & ~wmask);
    end
end

// int_HwReg_layerStartX_1[15:0]
always @(posedge ACLK) begin
    if (ARESET)
        int_HwReg_layerStartX_1[15:0] <= 0;
    else if (ACLK_EN) begin
        if (w_hs && waddr == ADDR_HWREG_LAYERSTARTX_1_DATA_0)
            int_HwReg_layerStartX_1[15:0] <= (WDATA[31:0] & wmask) | (int_HwReg_layerStartX_1[15:0] & ~wmask);
    end
end

// int_HwReg_layerStartY_1[15:0]
always @(posedge ACLK) begin
    if (ARESET)
        int_HwReg_layerStartY_1[15:0] <= 0;
    else if (ACLK_EN) begin
        if (w_hs && waddr == ADDR_HWREG_LAYERSTARTY_1_DATA_0)
            int_HwReg_layerStartY_1[15:0] <= (WDATA[31:0] & wmask) | (int_HwReg_layerStartY_1[15:0] & ~wmask);
    end
end

// int_HwReg_layerWidth_1[15:0]
always @(posedge ACLK) begin
    if (ARESET)
        int_HwReg_layerWidth_1[15:0] <= 0;
    else if (ACLK_EN) begin
        if (w_hs && waddr == ADDR_HWREG_LAYERWIDTH_1_DATA_0)
            int_HwReg_layerWidth_1[15:0] <= (WDATA[31:0] & wmask) | (int_HwReg_layerWidth_1[15:0] & ~wmask);
    end
end

// int_HwReg_layerStride_1[15:0]
always @(posedge ACLK) begin
    if (ARESET)
        int_HwReg_layerStride_1[15:0] <= 0;
    else if (ACLK_EN) begin
        if (w_hs && waddr == ADDR_HWREG_LAYERSTRIDE_1_DATA_0)
            int_HwReg_layerStride_1[15:0] <= (WDATA[31:0] & wmask) | (int_HwReg_layerStride_1[15:0] & ~wmask);
    end
end

// int_HwReg_layerHeight_1[15:0]
always @(posedge ACLK) begin
    if (ARESET)
        int_HwReg_layerHeight_1[15:0] <= 0;
    else if (ACLK_EN) begin
        if (w_hs && waddr == ADDR_HWREG_LAYERHEIGHT_1_DATA_0)
            int_HwReg_layerHeight_1[15:0] <= (WDATA[31:0] & wmask) | (int_HwReg_layerHeight_1[15:0] & ~wmask);
    end
end

// int_HwReg_layerScaleFactor_1[7:0]
always @(posedge ACLK) begin
    if (ARESET)
        int_HwReg_layerScaleFactor_1[7:0] <= 0;
    else if (ACLK_EN) begin
        if (w_hs && waddr == ADDR_HWREG_LAYERSCALEFACTOR_1_DATA_0)
            int_HwReg_layerScaleFactor_1[7:0] <= (WDATA[31:0] & wmask) | (int_HwReg_layerScaleFactor_1[7:0] & ~wmask);
    end
end

// int_HwReg_layerVideoFormat_1[7:0]
always @(posedge ACLK) begin
    if (ARESET)
        int_HwReg_layerVideoFormat_1[7:0] <= 0;
    else if (ACLK_EN) begin
        if (w_hs && waddr == ADDR_HWREG_LAYERVIDEOFORMAT_1_DATA_0)
            int_HwReg_layerVideoFormat_1[7:0] <= (WDATA[31:0] & wmask) | (int_HwReg_layerVideoFormat_1[7:0] & ~wmask);
    end
end

// int_HwReg_reserve[15:0]
always @(posedge ACLK) begin
    if (ARESET)
        int_HwReg_reserve[15:0] <= 0;
    else if (ACLK_EN) begin
        if (w_hs && waddr == ADDR_HWREG_RESERVE_DATA_0)
            int_HwReg_reserve[15:0] <= (WDATA[31:0] & wmask) | (int_HwReg_reserve[15:0] & ~wmask);
    end
end

// int_HwReg_logoStartX[15:0]
always @(posedge ACLK) begin
    if (ARESET)
        int_HwReg_logoStartX[15:0] <= 0;
    else if (ACLK_EN) begin
        if (w_hs && waddr == ADDR_HWREG_LOGOSTARTX_DATA_0)
            int_HwReg_logoStartX[15:0] <= (WDATA[31:0] & wmask) | (int_HwReg_logoStartX[15:0] & ~wmask);
    end
end

// int_HwReg_logoStartY[15:0]
always @(posedge ACLK) begin
    if (ARESET)
        int_HwReg_logoStartY[15:0] <= 0;
    else if (ACLK_EN) begin
        if (w_hs && waddr == ADDR_HWREG_LOGOSTARTY_DATA_0)
            int_HwReg_logoStartY[15:0] <= (WDATA[31:0] & wmask) | (int_HwReg_logoStartY[15:0] & ~wmask);
    end
end

// int_HwReg_logoWidth[15:0]
always @(posedge ACLK) begin
    if (ARESET)
        int_HwReg_logoWidth[15:0] <= 0;
    else if (ACLK_EN) begin
        if (w_hs && waddr == ADDR_HWREG_LOGOWIDTH_DATA_0)
            int_HwReg_logoWidth[15:0] <= (WDATA[31:0] & wmask) | (int_HwReg_logoWidth[15:0] & ~wmask);
    end
end

// int_HwReg_logoHeight[15:0]
always @(posedge ACLK) begin
    if (ARESET)
        int_HwReg_logoHeight[15:0] <= 0;
    else if (ACLK_EN) begin
        if (w_hs && waddr == ADDR_HWREG_LOGOHEIGHT_DATA_0)
            int_HwReg_logoHeight[15:0] <= (WDATA[31:0] & wmask) | (int_HwReg_logoHeight[15:0] & ~wmask);
    end
end

// int_HwReg_logoScaleFactor[15:0]
always @(posedge ACLK) begin
    if (ARESET)
        int_HwReg_logoScaleFactor[15:0] <= 0;
    else if (ACLK_EN) begin
        if (w_hs && waddr == ADDR_HWREG_LOGOSCALEFACTOR_DATA_0)
            int_HwReg_logoScaleFactor[15:0] <= (WDATA[31:0] & wmask) | (int_HwReg_logoScaleFactor[15:0] & ~wmask);
    end
end

// int_HwReg_logoAlpha[15:0]
always @(posedge ACLK) begin
    if (ARESET)
        int_HwReg_logoAlpha[15:0] <= 0;
    else if (ACLK_EN) begin
        if (w_hs && waddr == ADDR_HWREG_LOGOALPHA_DATA_0)
            int_HwReg_logoAlpha[15:0] <= (WDATA[31:0] & wmask) | (int_HwReg_logoAlpha[15:0] & ~wmask);
    end
end

// int_HwReg_logoClrKeyMin_R[7:0]
always @(posedge ACLK) begin
    if (ARESET)
        int_HwReg_logoClrKeyMin_R[7:0] <= 0;
    else if (ACLK_EN) begin
        if (w_hs && waddr == ADDR_HWREG_LOGOCLRKEYMIN_R_DATA_0)
            int_HwReg_logoClrKeyMin_R[7:0] <= (WDATA[31:0] & wmask) | (int_HwReg_logoClrKeyMin_R[7:0] & ~wmask);
    end
end

// int_HwReg_logoClrKeyMin_G[7:0]
always @(posedge ACLK) begin
    if (ARESET)
        int_HwReg_logoClrKeyMin_G[7:0] <= 0;
    else if (ACLK_EN) begin
        if (w_hs && waddr == ADDR_HWREG_LOGOCLRKEYMIN_G_DATA_0)
            int_HwReg_logoClrKeyMin_G[7:0] <= (WDATA[31:0] & wmask) | (int_HwReg_logoClrKeyMin_G[7:0] & ~wmask);
    end
end

// int_HwReg_logoClrKeyMin_B[7:0]
always @(posedge ACLK) begin
    if (ARESET)
        int_HwReg_logoClrKeyMin_B[7:0] <= 0;
    else if (ACLK_EN) begin
        if (w_hs && waddr == ADDR_HWREG_LOGOCLRKEYMIN_B_DATA_0)
            int_HwReg_logoClrKeyMin_B[7:0] <= (WDATA[31:0] & wmask) | (int_HwReg_logoClrKeyMin_B[7:0] & ~wmask);
    end
end

// int_HwReg_logoClrKeyMax_R[7:0]
always @(posedge ACLK) begin
    if (ARESET)
        int_HwReg_logoClrKeyMax_R[7:0] <= 0;
    else if (ACLK_EN) begin
        if (w_hs && waddr == ADDR_HWREG_LOGOCLRKEYMAX_R_DATA_0)
            int_HwReg_logoClrKeyMax_R[7:0] <= (WDATA[31:0] & wmask) | (int_HwReg_logoClrKeyMax_R[7:0] & ~wmask);
    end
end

// int_HwReg_logoClrKeyMax_G[7:0]
always @(posedge ACLK) begin
    if (ARESET)
        int_HwReg_logoClrKeyMax_G[7:0] <= 0;
    else if (ACLK_EN) begin
        if (w_hs && waddr == ADDR_HWREG_LOGOCLRKEYMAX_G_DATA_0)
            int_HwReg_logoClrKeyMax_G[7:0] <= (WDATA[31:0] & wmask) | (int_HwReg_logoClrKeyMax_G[7:0] & ~wmask);
    end
end

// int_HwReg_logoClrKeyMax_B[7:0]
always @(posedge ACLK) begin
    if (ARESET)
        int_HwReg_logoClrKeyMax_B[7:0] <= 0;
    else if (ACLK_EN) begin
        if (w_hs && waddr == ADDR_HWREG_LOGOCLRKEYMAX_B_DATA_0)
            int_HwReg_logoClrKeyMax_B[7:0] <= (WDATA[31:0] & wmask) | (int_HwReg_logoClrKeyMax_B[7:0] & ~wmask);
    end
end


//------------------------Memory logic-------------------
// HwReg_logoR_V
assign int_HwReg_logoR_V_address0 = HwReg_logoR_V_address0 >> 2;
assign int_HwReg_logoR_V_ce0      = HwReg_logoR_V_ce0;
assign int_HwReg_logoR_V_we0      = 1'b0;
assign int_HwReg_logoR_V_be0      = 1'b0;
assign int_HwReg_logoR_V_d0       = 1'b0;
assign HwReg_logoR_V_q0           = int_HwReg_logoR_V_q0 >> (int_HwReg_logoR_V_shift * 8);
assign int_HwReg_logoR_V_address1 = ar_hs? raddr[13:2] : waddr[13:2];
assign int_HwReg_logoR_V_ce1      = ar_hs | (int_HwReg_logoR_V_write & WVALID);
assign int_HwReg_logoR_V_we1      = int_HwReg_logoR_V_write & WVALID;
assign int_HwReg_logoR_V_be1      = WSTRB;
assign int_HwReg_logoR_V_d1       = WDATA;
// HwReg_logoG_V
assign int_HwReg_logoG_V_address0 = HwReg_logoG_V_address0 >> 2;
assign int_HwReg_logoG_V_ce0      = HwReg_logoG_V_ce0;
assign int_HwReg_logoG_V_we0      = 1'b0;
assign int_HwReg_logoG_V_be0      = 1'b0;
assign int_HwReg_logoG_V_d0       = 1'b0;
assign HwReg_logoG_V_q0           = int_HwReg_logoG_V_q0 >> (int_HwReg_logoG_V_shift * 8);
assign int_HwReg_logoG_V_address1 = ar_hs? raddr[13:2] : waddr[13:2];
assign int_HwReg_logoG_V_ce1      = ar_hs | (int_HwReg_logoG_V_write & WVALID);
assign int_HwReg_logoG_V_we1      = int_HwReg_logoG_V_write & WVALID;
assign int_HwReg_logoG_V_be1      = WSTRB;
assign int_HwReg_logoG_V_d1       = WDATA;
// HwReg_logoB_V
assign int_HwReg_logoB_V_address0 = HwReg_logoB_V_address0 >> 2;
assign int_HwReg_logoB_V_ce0      = HwReg_logoB_V_ce0;
assign int_HwReg_logoB_V_we0      = 1'b0;
assign int_HwReg_logoB_V_be0      = 1'b0;
assign int_HwReg_logoB_V_d0       = 1'b0;
assign HwReg_logoB_V_q0           = int_HwReg_logoB_V_q0 >> (int_HwReg_logoB_V_shift * 8);
assign int_HwReg_logoB_V_address1 = ar_hs? raddr[13:2] : waddr[13:2];
assign int_HwReg_logoB_V_ce1      = ar_hs | (int_HwReg_logoB_V_write & WVALID);
assign int_HwReg_logoB_V_we1      = int_HwReg_logoB_V_write & WVALID;
assign int_HwReg_logoB_V_be1      = WSTRB;
assign int_HwReg_logoB_V_d1       = WDATA;
// int_HwReg_logoR_V_read
always @(posedge ACLK) begin
    if (ARESET)
        int_HwReg_logoR_V_read <= 1'b0;
    else if (ACLK_EN) begin
        if (ar_hs && raddr >= ADDR_HWREG_LOGOR_V_BASE && raddr <= ADDR_HWREG_LOGOR_V_HIGH)
            int_HwReg_logoR_V_read <= 1'b1;
        else
            int_HwReg_logoR_V_read <= 1'b0;
    end
end

// int_HwReg_logoR_V_write
always @(posedge ACLK) begin
    if (ARESET)
        int_HwReg_logoR_V_write <= 1'b0;
    else if (ACLK_EN) begin
        if (aw_hs && AWADDR[ADDR_BITS-1:0] >= ADDR_HWREG_LOGOR_V_BASE && AWADDR[ADDR_BITS-1:0] <= ADDR_HWREG_LOGOR_V_HIGH)
            int_HwReg_logoR_V_write <= 1'b1;
        else if (WVALID)
            int_HwReg_logoR_V_write <= 1'b0;
    end
end

// int_HwReg_logoR_V_shift
always @(posedge ACLK) begin
    if (ACLK_EN) begin
        if (HwReg_logoR_V_ce0)
            int_HwReg_logoR_V_shift <= HwReg_logoR_V_address0[1:0];
    end
end

// int_HwReg_logoG_V_read
always @(posedge ACLK) begin
    if (ARESET)
        int_HwReg_logoG_V_read <= 1'b0;
    else if (ACLK_EN) begin
        if (ar_hs && raddr >= ADDR_HWREG_LOGOG_V_BASE && raddr <= ADDR_HWREG_LOGOG_V_HIGH)
            int_HwReg_logoG_V_read <= 1'b1;
        else
            int_HwReg_logoG_V_read <= 1'b0;
    end
end

// int_HwReg_logoG_V_write
always @(posedge ACLK) begin
    if (ARESET)
        int_HwReg_logoG_V_write <= 1'b0;
    else if (ACLK_EN) begin
        if (aw_hs && AWADDR[ADDR_BITS-1:0] >= ADDR_HWREG_LOGOG_V_BASE && AWADDR[ADDR_BITS-1:0] <= ADDR_HWREG_LOGOG_V_HIGH)
            int_HwReg_logoG_V_write <= 1'b1;
        else if (WVALID)
            int_HwReg_logoG_V_write <= 1'b0;
    end
end

// int_HwReg_logoG_V_shift
always @(posedge ACLK) begin
    if (ACLK_EN) begin
        if (HwReg_logoG_V_ce0)
            int_HwReg_logoG_V_shift <= HwReg_logoG_V_address0[1:0];
    end
end

// int_HwReg_logoB_V_read
always @(posedge ACLK) begin
    if (ARESET)
        int_HwReg_logoB_V_read <= 1'b0;
    else if (ACLK_EN) begin
        if (ar_hs && raddr >= ADDR_HWREG_LOGOB_V_BASE && raddr <= ADDR_HWREG_LOGOB_V_HIGH)
            int_HwReg_logoB_V_read <= 1'b1;
        else
            int_HwReg_logoB_V_read <= 1'b0;
    end
end

// int_HwReg_logoB_V_write
always @(posedge ACLK) begin
    if (ARESET)
        int_HwReg_logoB_V_write <= 1'b0;
    else if (ACLK_EN) begin
        if (aw_hs && AWADDR[ADDR_BITS-1:0] >= ADDR_HWREG_LOGOB_V_BASE && AWADDR[ADDR_BITS-1:0] <= ADDR_HWREG_LOGOB_V_HIGH)
            int_HwReg_logoB_V_write <= 1'b1;
        else if (WVALID)
            int_HwReg_logoB_V_write <= 1'b0;
    end
end

// int_HwReg_logoB_V_shift
always @(posedge ACLK) begin
    if (ACLK_EN) begin
        if (HwReg_logoB_V_ce0)
            int_HwReg_logoB_V_shift <= HwReg_logoB_V_address0[1:0];
    end
end


endmodule


`timescale 1ns/1ps

module hdmi_v_mix_0_0_v_mix_CTRL_s_axi_ram
#(parameter
    BYTES  = 4,
    DEPTH  = 256,
    AWIDTH = log2(DEPTH)
) (
    input  wire               clk0,
    input  wire [AWIDTH-1:0]  address0,
    input  wire               ce0,
    input  wire               we0,
    input  wire [BYTES-1:0]   be0,
    input  wire [BYTES*8-1:0] d0,
    output reg  [BYTES*8-1:0] q0,
    input  wire               clk1,
    input  wire [AWIDTH-1:0]  address1,
    input  wire               ce1,
    input  wire               we1,
    input  wire [BYTES-1:0]   be1,
    input  wire [BYTES*8-1:0] d1,
    output reg  [BYTES*8-1:0] q1
);
//------------------------Local signal-------------------
reg  [BYTES*8-1:0] mem[0:DEPTH-1];
//------------------------Task and function--------------
function integer log2;
    input integer x;
    integer n, m;
begin
    n = 1;
    m = 2;
    while (m < x) begin
        n = n + 1;
        m = m * 2;
    end
    log2 = n;
end
endfunction
//------------------------Body---------------------------
// read port 0
always @(posedge clk0) begin
    if (ce0) q0 <= mem[address0];
end

// read port 1
always @(posedge clk1) begin
    if (ce1) q1 <= mem[address1];
end

genvar i;
generate
    for (i = 0; i < BYTES; i = i + 1) begin : gen_write
        // write port 0
        always @(posedge clk0) begin
            if (ce0 & we0 & be0[i]) begin
                mem[address0][8*i+7:8*i] <= d0[8*i+7:8*i];
            end
        end
        // write port 1
        always @(posedge clk1) begin
            if (ce1 & we1 & be1[i]) begin
                mem[address1][8*i+7:8*i] <= d1[8*i+7:8*i];
            end
        end
    end
endgenerate

endmodule

